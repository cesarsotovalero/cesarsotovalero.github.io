name: Update LinkedIn Posts and Download Images
on:
  schedule:
    - cron: "0 0 * * 1" # Runs every Monday at midnight UTC
  workflow_dispatch:

jobs:
  update-linkedin-posts:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch LinkedIn posts
        env:
          RAPIDAPI_LINKEDIN_DATA_API_KEY: ${{ secrets.RAPIDAPI_LINKEDIN_DATA_API_KEY }}
        run: |
          # Generate URL-encoded date string for last week's UTC date at 00:00
          encodedDate=$(date -u -d '7 days ago' +'%Y-%m-%d 00:00' | sed 's/ /%20/g;s/:/%3A/g')
          echo "Fetching posts from date: $encodedDate"
          # Fetch LinkedIn posts using the API
          curl --request GET \
            --url "https://linkedin-data-api.p.rapidapi.com/get-profile-posts?username=cesarsotovalero&postedAt=${encodedDate}" \
            --header "x-rapidapi-host: linkedin-data-api.p.rapidapi.com" \
            --header "x-rapidapi-key: $RAPIDAPI_LINKEDIN_DATA_API_KEY" \
            -o linkedin-posts.json

      - name: Merge new posts with existing JSON
        run: |
          # If the JSON file already exists, merge new data with the existing entries.
          if [ -f _data/linkedin-posts.json ]; then
            originalCount=$(jq '.data | length' _data/linkedin-posts.json)
            jq -s '{
              success: true,
              message: "",
              data: (.[0].data + .[1].data | unique_by(.postedDateTimestamp) | sort_by(.postedDateTimestamp) | reverse)
            }' linkedin-posts.json _data/linkedin-posts.json > merged.json
            newCount=$(jq '.data | length' merged.json)
            echo "Number of new entries added: $((newCount - originalCount))"
          else
            jq '.data |= sort_by(.postedDateTimestamp) | .data |= reverse' linkedin-posts.json > merged.json
            newCount=$(jq '.data | length' merged.json)
            echo "Number of new entries added: $newCount"
          fi
          # Move the merged file to the _data directory, overwriting if it exists
          mv -f merged.json _data/linkedin-posts.json

      - name: Create assets directory if it doesn't exist
        run: |
          mkdir -p assets/images/linkedin

      - name: Download images from new entries
        run: |
          # First, validate the JSON structure
          if ! jq -e . >/dev/null 2>&1 < _data/linkedin-posts.json; then
            echo "Error: Invalid JSON in _data/linkedin-posts.json"
            exit 1
          fi

          # Process each post with error handling
          jq -r '.data[] | select(.image != null and (.image | length > 0)) | @base64' _data/linkedin-posts.json | while read -r post_b64; do
            if [ -z "$post_b64" ]; then
              continue
            fi
            
            # Decode the base64 post data
            post=$(echo "$post_b64" | base64 --decode)
            
            # Extract timestamp with error checking
            posted_ts=$(echo "$post" | jq -r '.postedDateTimestamp // empty')
            if [ -z "$posted_ts" ]; then
              echo "Warning: Missing timestamp for post, skipping"
              continue
            fi
            
            dir="assets/images/linkedin/${posted_ts}"
            mkdir -p "$dir"
            
            # Process images with error handling
            echo "$post" | jq -r '.image[] | select(.url != null) | @base64' 2>/dev/null | while read -r img_b64; do
              if [ -z "$img_b64" ]; then
                continue
              fi
              
              # Decode the base64 image data
              img=$(echo "$img_b64" | base64 --decode)
              
              # Extract image properties with error checking
              url=$(echo "$img" | jq -r '.url // empty')
              width=$(echo "$img" | jq -r '.width // empty')
              height=$(echo "$img" | jq -r '.height // empty')
              
              if [ -z "$url" ] || [ -z "$width" ] || [ -z "$height" ]; then
                echo "Warning: Missing image properties, skipping"
                continue
              fi
              
              # Create filename with dimensions
              filename="${width}x${height}.jpg"
              output_path="${dir}/${filename}"
              
              # Only download if file doesn't exist
              if [ ! -f "$output_path" ]; then
                echo "Downloading image to $output_path"
                if ! curl -L "$url" -o "$output_path"; then
                  echo "Failed to download $url, skipping"
                  continue
                fi
              else
                echo "Image $output_path already exists, skipping"
              fi
            done
          done
        shell: bash

      - name: Commit and push changes if any
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _data/linkedin-posts.json
          git add assets/images/linkedin/
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update LinkedIn posts and images $(date -u +'%Y-%m-%d')"
            git push
          else
            echo "No changes to commit"
          fi
