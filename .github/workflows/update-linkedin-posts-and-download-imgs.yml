name: Update LinkedIn Posts and Download Images
on:
  schedule:
    # Runs every monday at midnight UTC
    - cron: '0 0 * * *' 
  workflow_dispatch:

jobs:
  update-linkedin-posts:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch LinkedIn posts
        env:
          RAPIDAPI_LINKEDIN_DATA_API_KEY: ${{ secrets.RAPIDAPI_LINKEDIN_DATA_API_KEY }}
        run: |
          # Generate URL-encoded date string for last week's UTC date at 00:00
          encodedDate=$(date -u -d '7 days ago' +'%Y-%m-%d 00:00' | sed 's/ /%20/g;s/:/%3A/g')
          echo "Fetching posts from date: $encodedDate"
          # Fetch LinkedIn posts using the API
          curl --request GET \
            --url "https://linkedin-data-api.p.rapidapi.com/get-profile-posts?username=cesarsotovalero&postedAt=${encodedDate}" \
            --header "x-rapidapi-host: linkedin-data-api.p.rapidapi.com" \
            --header "x-rapidapi-key: $RAPIDAPI_LINKEDIN_DATA_API_KEY" \
            -o linkedin-posts.json

      - name: Merge new posts with existing JSON
        run: |
          # If the JSON file already exists, merge new data with the existing entries.
          if [ -f _data/linkedin-posts.json ]; then
            originalCount=$(jq '.data | length' _data/linkedin-posts.json)
            jq -s '{
              success: true,
              message: "",
              data: (.[0].data + .[1].data | unique_by(.postedDateTimestamp) | sort_by(.postedDateTimestamp) | reverse)
            }' linkedin-posts.json _data/linkedin-posts.json > merged.json
            newCount=$(jq '.data | length' merged.json)
            echo "Number of new entries added: $((newCount - originalCount))"
          else
            jq '.data |= sort_by(.postedDateTimestamp) | .data |= reverse' linkedin-posts.json > merged.json
            newCount=$(jq '.data | length' merged.json)
            echo "Number of new entries added: $newCount"
          fi
          # Move the merged file to the _data directory, overwriting if it exists
          mv -f merged.json _data/linkedin-posts.json

      - name: Download images from new entries
        run: |
          cat _data/linkedin-posts.json | jq -c '.data[] | select(.image != null and (.image | length > 0))' | while read post; do
            posted_ts=$(echo "$post" | jq -r '.postedDateTimestamp')
            echo "Processing post $posted_ts"
            for img in $(echo "$post" | jq -c '.image[]'); do
              url=$(echo "$img" | jq -r '.url')
              width=$(echo "$img" | jq -r '.width')
              height=$(echo "$img" | jq -r '.height')
              dir=_data/linkedin-posts-images/${posted_ts}/${width}x${height}
              mkdir -p "$dir"
              # Remove query params from filename
              filename=$(basename "${url%%\?*}")
              echo "Downloading image to ${dir}/${filename}"
              if ! curl -L "$url" -o "${dir}/${filename}"; then
                echo "Failed to download $url, skipping"
                continue
              fi
            done
          done
        shell: bash

      - name: Commit and push changes if any
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Remove the following mv command to avoid overwriting the merged file
          # mv -f ../linkedin-posts.json linkedin-posts.json
          git add _data/linkedin-posts.json
          git add _data/linkedin-posts.json _data/linkedin-posts-images/
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Update LinkedIn posts $(date -u +'%Y-%m-%d')"
            git push
          else
            echo "No changes to commit"
          fi
